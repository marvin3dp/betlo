name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Test on multiple operating systems
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce build time
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
          sudo apt-get install -y libopencv-dev python3-opencv

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install tesseract
          brew install opencv

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install tesseract -y
          echo "C:\Program Files\Tesseract-OCR" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Lint with flake8
        continue-on-error: true
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Check code formatting with black
        continue-on-error: true
        run: |
          pip install black
          black --check --line-length 100 .

      - name: Type checking with mypy
        continue-on-error: true
        run: |
          pip install mypy types-PyYAML
          mypy zefoy_bot/ --ignore-missing-imports || true

      - name: Run tests
        if: hashFiles('tests/**') != ''
        run: |
          pip install pytest pytest-cov
          pytest tests/ -v --cov=zefoy_bot --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Build package for release
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build source distribution
        run: python -m build --sdist --wheel

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 5

  # Create release archives for each OS
  create-release-archives:
    name: Create release archive for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            archive_name: tiktok-bot-linux-x64
            archive_ext: tar.gz
          - os: macos-latest
            archive_name: tiktok-bot-macos-x64
            archive_ext: tar.gz
          - os: windows-latest
            archive_name: tiktok-bot-windows-x64
            archive_ext: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create release directory
        shell: bash
        run: |
          mkdir -p release
          cp -r zefoy_bot release/
          cp -r docs release/
          cp -r assets release/ || true
          cp config.yaml release/
          cp requirements.txt release/
          cp run.py release/
          cp README.md release/
          cp LICENSE release/
          cp install.sh release/ || true
          cp activate.sh release/ || true

      - name: Create archive (Linux/macOS)
        if: matrix.archive_ext == 'tar.gz'
        run: |
          tar -czf ${{ matrix.archive_name }}.tar.gz -C release .

      - name: Create archive (Windows)
        if: matrix.archive_ext == 'zip'
        run: |
          Compress-Archive -Path release/* -DestinationPath ${{ matrix.archive_name }}.zip

      - name: Upload release archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}.${{ matrix.archive_ext }}
          retention-days: 5

  # Create GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, create-release-archives]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          if [ -f "docs/CHANGELOG.md" ]; then
            # Extract the latest version changelog
            awk '/^## \[/{if(p)exit;p=1}p' docs/CHANGELOG.md > LATEST_CHANGELOG.md
          else
            echo "Release ${{ steps.get_version.outputs.VERSION }}" > LATEST_CHANGELOG.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: LATEST_CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          files: |
            artifacts/dist-packages/*
            artifacts/tiktok-bot-linux-x64/tiktok-bot-linux-x64.tar.gz
            artifacts/tiktok-bot-macos-x64/tiktok-bot-macos-x64.tar.gz
            artifacts/tiktok-bot-windows-x64/tiktok-bot-windows-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
